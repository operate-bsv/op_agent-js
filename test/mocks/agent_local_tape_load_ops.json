{"data":[{"addr":"1LSKtFoK81PNxN4SEn2qErsa8V3PizUBCx","blk":{"i":610087, "t":1574526488},"conf":true,"fn":"--[[\nExtends the state with the given key/value pairs (overriding values where keys\nalready exist).\n\nTakes a variable length number of arguments and maps them into key value pairs.\nEach key must be a alphanumeric path. Dot delimeted paths are iterated over\nsetting the value on a deeply nested table. If a key ends in `[]` the value is\npushed in to an array.\n\n## Examples\n\n    OP_FALSE OP_RETURN\n      $REF\n        \"user.name\"\n        \"Joe Bloggs\"\n        \"user.age\"\n        20\n        |\n      $REF\n        \"user.email\"\n        \"joe@example.com\"\n        \"user.age\"\n        24\n    # {\n    #   user: {\n    #     age: 24,\n    #     email: \"joe@example.com\",\n    #     name: \"Joe Bloggs\"\n    #   }\n    # }\n\n@version 0.2.0\n@author Libs\n]]--\nreturn function(state, ...)\n  state = state or {}\n  assert(\n    type(state) == 'table',\n    'Invalid state. Must receive a table.')\n\n  -- Helper function to put the value on the tip of the path. If the path ends\n  -- with `[]` then the value is placed in an integer indexed table.\n  local function put_value(obj, path, value)\n    if string.match(path, '%[%]$') then\n      local p = string.match(path, '^[%a%d]+')\n      if type(obj[p]) ~= 'table' then obj[p] = {} end\n      table.insert(obj[p], value)\n    else\n      obj[path] = value\n    end\n  end\n\n  -- Helper function to extend the given object with the path and value.\n  -- Splits the path into an array of keys and iterrates over each, either\n  -- extending the state object or setting the value on the tip.\n  local function extend(obj, path, value)\n    local keys = {}\n    string.gsub(path, '[^%.]+', function(k) table.insert(keys, k) end)\n    for i, k in ipairs(keys) do\n      if i == #keys then\n        put_value(obj, k, value)\n      elseif type(obj[k]) ~= 'table' then\n        obj[k] = {}\n      end\n      obj = obj[k]\n    end\n  end\n\n  -- Iterrate over each vararg pair to get the path and value\n  -- Unless path is blank, the state is extended\n  for n = 1, select('#', ...) do\n    if math.fmod(n, 2) > 0 then\n      local path = select(n, ...)\n      local value = select(n+1, ...)\n      if path ~= nil and string.match(path, '^[%a%d%.]+%[?%]?$') then\n        extend(state, path, value)\n      end\n    end\n  end\n\n  return state\nend","hash":"2432924b918cb6d16742f3bdb449d8b6af2861ee5c430ea2fe04743de5b2e9fb","i":1049,"meta":{"author":"Libs","version":"0.2.0"},"name":"object/extend","ref":"2432924b","txid":"4f8167e6138b5fbf596539868bc3e6c68be7daebed043c02a01122cb4d22cf73"}]}