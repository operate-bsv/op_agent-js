{"data":[{"addr":"1LSKtFoK81PNxN4SEn2qErsa8V3PizUBCx","blk":{"i":604489,"t":1571181097},"conf":true,"fn":"--[[\nExtends the state object by placing the given values at the given keys\n(overriding values where keys already exist).\n\nTakes a variable length number of arguments and maps them into key value pairs.\nWhere a key is a path seperated by `.`, the object is traversed, creating a\ndeeply nested object until the value is set on the tip.\n\n## Examples\n\n    OP_FALSE OP_RETURN\n      $REF\n        \"user.name\"\n        \"Joe Bloggs\"\n        \"user.age\"\n        20\n        |\n      $REF\n        \"user.email\"\n        \"joe@example.com\"\n        \"user.age\"\n        24\n    # {\n    #   user: {\n    #     age: 24,\n    #     email: \"joe@example.com\",\n    #     name: \"Joe Bloggs\"\n    #   }\n    # }\n\n@version 0.1.0\n@author Libs\n]]--\nreturn function(state, ...)\n  state = state or {}\n  assert(\n    type(state) == 'table',\n    'Invalid state. Must receive a table.')\n\n  -- Helper function to extend the given object with the path and value.\n  -- Splits the path into an array of keys and iterrates over each, either\n  -- extending the state object or setting the value on the tip.\n  local function extend(state, path, value)\n    local keys = {}\n    string.gsub(path, '[^%.]+', function(k) table.insert(keys, k) end)\n    for i, k in ipairs(keys) do\n      if i == #keys then\n        state[k] = value\n      elseif type(state[k]) ~= 'table' then\n        state[k] = {}\n      end\n      state = state[k]\n    end\n  end\n\n  -- Iterrate over each vararg pair to get the path and value\n  -- Unless path is blank, the state is extended\n  for n = 1, select('#', ...) do\n    if math.fmod(n, 2) > 0 then\n      local path = select(n, ...)\n      local value = select(n+1, ...)\n      if path ~= nil and string.len(path) > 0 then\n        extend(state, path, value)\n      end\n    end\n  end\n\n  return state\nend","hash":"9ef5fd5c85e8b14990daf50a05f9d80a9a5ae81262fd838daf228e52fb6cf824","i":33,"meta":{"author":"Libs","version":"0.1.0"},"name":"object/extend","ref":"9ef5fd5c","txid":"58bd84228039631fed6ded725c339829dbb5f75c17c6c8a36718acffb87334a5"},{"addr":"1LSKtFoK81PNxN4SEn2qErsa8V3PizUBCx","blk":{"i":604489,"t":1571181097},"conf":true,"fn":"--[[\nCreates a new object and places the state at the given path. The object is\nextended by placing the given values at the given keys unless the key already\nexists. Effectively the inverse of `object/put`.\n\nTakes a variable length number of arguments and maps them into key value pairs.\nWhere a key is a path seperated by `.`, the table is traversed creating a nested\ntable until the value is set on the tip.\n\n## Examples\n\n    OP_FALSE OP_RETURN\n      $REF\n        \"account\"\n        \"user.name\"\n        \"Joe Bloggs\"\n        \"user.age\"\n        20\n    # {\n    #   account: {...},\n    #   user: {\n    #     age: 20,\n    #     name: \"Joe Bloggs\"\n    #   }\n    # }\n\n@version 0.1.0\n@author Libs\n]]--\nreturn function(state, path, ...)\n  state = state or {}\n  local obj = {}\n  assert(\n    type(state) == 'table',\n    'Invalid state. Must receive a table.')\n  assert(\n    type(path) == 'string' and string.len(path) > 0,\n    'Invalid path. Must receive a string.')\n\n  -- Helper function to extend the given object with the path and value.\n  -- Splits the path into an array of keys and iterrates over each, either\n  -- extending the state object or setting the value on the tip, without\n  -- overwriting any existing value.\n  local function extend_new(state, path, value)\n    local keys = {}\n    string.gsub(path, '[^%.]+', function(k) table.insert(keys, k) end)\n    for i, k in ipairs(keys) do\n      if type(state) ~= 'table' then\n        break\n      elseif state[k] == nil then\n        if i == #keys then state[k] = value else state[k] = {} end\n      end\n      state = state[k]\n    end\n  end\n\n  -- Extend new object with state\n  extend_new(obj, path, state)\n\n  -- Iterrate over each vararg pair to get the path and value\n  -- Unless path is blank, the state is extended\n  for n = 1, select('#', ...) do\n    if math.fmod(n, 2) > 0 then\n      local path = select(n, ...)\n      local value = select(n+1, ...)\n      if path ~= nil and string.len(path) > 0 then\n        extend_new(obj, path, value)\n      end\n    end\n  end\n\n  return obj\nend","hash":"0ca59130e08741a0d54d808dd17aab2a205114767e9959f6da08cc163841499c","i":37,"meta":{"author":"Libs","version":"0.1.0"},"name":"object/put_new","ref":"0ca59130","txid":"b7925d4c1e1b9a6222139c0293ef8c93a8dc320810f82745c9c66cafb8e3e6b1"}]}